/*
# MavenCentral release task for a Java/Android library
from https://github.com/kit-data-manager/nexus-publish-example#automated-publishing-via-github-actions

## Requirements

* deploy.gradle file in the projectDir:
    ext.deploy = [
        "siteUrl"           : "site url",
        "gitUrl"            : "git url",
        "groupId"           : "package name",
        "licenseName"       : "MIT",
        "licenseUrl"        : "https ://opensource.org/licenses/MIT",
        "id"                : "the package id"
    ]

* defined ext.ver."$deploy.id" or "version", eg
    version = 1.0

env variables

ORG_GRADLE_PROJECT_sonatypeUsername
ORG_GRADLE_PROJECT_sonatypePassword

MAVEN_SIGNING_KEY_ID
MAVEN_SIGNING_PASSWORD
MAVEN_SIGNING_SECRET_KEY_RING_FILE

* gpg keypair created and uploaded to hkp://pool.sks-keyservers.net

# Release process:

* update ext.ver values in *all* build.gradle or use -Pversion property

* Call `./gradlew -Prelease release` to publish to MavenCentral
*/


apply plugin: "maven-publish"
apply plugin: 'signing'
apply plugin: 'net.researchgate.release'

apply from: "$projectDir/deploy.gradle"

def isAndroid = project.plugins.findPlugin("com.android.library")

// plugin net.researchgate.release(https://github.com/researchgate/gradle-release)
// It updates the version and creates automatic commits
release {
    //define template for tagging, e.g. v1.0.0
    tagTemplate = 'v${version}'
    //set source file of version property
    versionPropertyFile = 'gradle.properties'
    //set possible properties which may contain the version
    versionProperties = ['version', 'mainversion']
    git {
        // branch from where to release (default: master)
        // https://github.com/researchgate/gradle-release/issues/357
        // TODO: use main
        requireBranch.set('feature/ci-release')
    }
}

//for plugin io.github.gradle-nexus.publish-plugin
//see https://github.com/gradle-nexus/publish-plugin
nexusPublishing {
    repositories {
        sonatype()
    }
}

publishing {
    publications {
        release(MavenPublication) {
            // get aar or jar for android/java libs
            if (isAndroid) {
                task sourceJar(type: Jar) {
                    from android.sourceSets.main.java.srcDirs
                    classifier "sources"
                }

                artifact(sourceJar)
                artifact("$buildDir/outputs/aar/${deploy.id}-release.aar")
            } else {
                java {
                    withJavadocJar()
                    withSourcesJar()
                }

                from components.java
            }

            groupId = deploy.groupId
            artifactId = deploy.id

            pom {
                name = deploy.id
                url = deploy.siteUrl
                inceptionYear = '2020'
                description = deploy.id
                licenses {
                    license {
                        name = deploy.licenseName
                        url = deploy.licenseUrl
                    }
                }
                developers {
                    developer {
                        id = 'tonis'
                        name = 'Tonis Tiganik'
                        email = 'ttiganik@high-mobility.com'
                    }
                    developer {
                        id = 'kevin'
                        name = 'Kevin Valdek'
                        email = 'kevin@high-mobility.com'
                    }
                }
                scm {
                    connection = deploy.gitUrl
                    developerConnection = deploy.gitUrl
                    url = deploy.siteUrl
                }

                if (isAndroid) {
                    // needed for .aar transitive dependencies
                    withXml {
                        def dependenciesNode = asNode()['dependencies'][0] ?: asNode().appendNode('dependencies')
                        configurations.implementation.allDependencies.each {
                            if (it.name != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)

                                if (it.version == "unspecified") {
                                    throw new GradleException("dependency version is unspecified " + "for $deploy.id submodule $it.name, node $it")
                                } else {
                                    dependencyNode.appendNode('version', it.version)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

signing {
    if (project.hasProperty("signingKey")) {
        def signingKey = findProperty("signingKey")
        //read property 'signingPassword'
        def signingPassword = findProperty("signingPassword")
        //Select to use in-memory ascii-armored keys
        useInMemoryPgpKeys(signingKey, signingPassword)

        sign publishing.publications
    } else {
        println 'WARNING: No property \'signingKey\' found. Artifact signing will be skipped.'
    }
}
